{"version":3,"file":"bundle-index.js","sources":["../src/index.ts"],"sourcesContent":["\r\nconst space = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    let space: RegExpMatchArray | null = null\r\n    for (; i < str.length; i++) {\r\n        const match = str.slice(idx, i + 1).match(/^(\\s+)$/)\r\n        if (!match) break\r\n        space = match\r\n    }\r\n    if (!space) return null\r\n    return { type: \"space\", value: space[1], idx: i } as const\r\n}\r\n\r\nconst _null = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    const firstWord = word(str, i)\r\n    if (!firstWord || firstWord.value != \"null\") return null\r\n    i = firstWord.idx\r\n\r\n    return {\r\n        type: \"null\",\r\n        value: null,\r\n        idx: i\r\n    } as const\r\n}\r\n\r\nconst boolean = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    const firstWord = word(str, i)\r\n    if (!firstWord || ![\"true\", \"false\"].includes(firstWord.value)) return null\r\n    i = firstWord.idx\r\n\r\n    return {\r\n        type: \"boolean\",\r\n        value: firstWord.value == \"true\",\r\n        idx: i\r\n    } as const\r\n}\r\n\r\nconst number = (str: string, idx: number = 0) => {\r\n    let i = idx, number = '', sign = '+'\r\n    if (str.charAt(i) == '-') sign = '-', i++\r\n    for (; i < str.length; i++) {\r\n        const char = str.charAt(i)\r\n        if (/\\d/.test(char) || number && !number.includes('.') && char == '.')\r\n            number += char\r\n        else break\r\n    }\r\n    if (!number || number.endsWith('.')) return null\r\n    return { type: \"number\", value: Number(sign + number), idx: i } as const\r\n}\r\n\r\nconst string = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    if (!str.startsWith('\"')) return null; i++\r\n    let string = \"\", char = str[i], escaped = false\r\n    for (; i < str.length; i++, char = str[i]) {\r\n        if (escaped || !['\"', \"\\\\\"].includes(str[i])) {\r\n            string += (escaped ? \"\\\\\" : '') + char\r\n            escaped = false\r\n        }\r\n        else if (char == \"\\\\\") {\r\n            escaped = true\r\n        }\r\n        else if (!escaped && char == '\"') { i++; break }\r\n    }\r\n    if (escaped || char != '\"') return null;\r\n    return { type: \"string\", value: string, idx: i }\r\n}\r\n\r\nconst word = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    let word: RegExpMatchArray | null = null\r\n    for (; i < str.length; i++) {\r\n        const match = str.slice(idx, i + 1).match(/^([a-zA-Z_][a-zA-Z0-9_]*)$/)\r\n        if (!match) break\r\n        word = match\r\n    }\r\n    if (!word) return null\r\n    return { type: \"word\", value: word[1], idx: i } as const\r\n}\r\n\r\nconst name = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    const firstWord = word(str, i)\r\n    const words: { value: string, isArray: boolean }[] = []\r\n    if (!firstWord) return null\r\n    i = firstWord.idx\r\n\r\n    let currentWord = { value: firstWord.value, isArray: false }\r\n    words.push(currentWord)\r\n\r\n    while (true) {\r\n        if (str.slice(i, i + 2) == \"[]\") i += 2, currentWord.isArray = true\r\n        if (str[i] == '.') i++; else break\r\n\r\n        const nextWord = word(str, i)\r\n        if (!nextWord) return null\r\n        i = nextWord.idx\r\n        words.push(currentWord = { value: nextWord.value, isArray: false })\r\n    }\r\n\r\n    return {\r\n        type: \"name\",\r\n        idx: i,\r\n        words,\r\n    } as const\r\n}\r\n\r\nconst list = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    const list: NonNullable<ReturnType<typeof term>>[] = []\r\n    if (str[i] != \"[\") return null; i++\r\n\r\n    const firstSpace = space(str, i)\r\n    if (firstSpace) i = firstSpace.idx\r\n\r\n    const firstTerm = term(str, i)\r\n    if (firstTerm !== null) {\r\n        i = firstTerm.idx\r\n        list.push(firstTerm)\r\n    }\r\n\r\n    while (firstTerm !== null) {\r\n        const nextSpace = space(str, i)\r\n        if (nextSpace) i = nextSpace.idx\r\n\r\n        if (str[i] != \",\") break; i++\r\n\r\n        const lastSpace = space(str, i)\r\n        if (lastSpace) i = lastSpace.idx\r\n\r\n        const lastTerm = term(str, i)\r\n        if (lastTerm === null) break\r\n        i = lastTerm.idx\r\n\r\n        list.push(lastTerm)\r\n    }\r\n\r\n    const lastSpace = space(str, i)\r\n    if (lastSpace) i = lastSpace.idx\r\n\r\n    if (str[i] != \"]\") return null; i++\r\n\r\n    return {\r\n        type: \"list\",\r\n        value: list,\r\n        idx: i,\r\n    } as const\r\n}\r\n\r\nconst group = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    if (str[i] != \"(\") return null; i++\r\n\r\n    const firstSpace = space(str, i)\r\n    if (firstSpace) i = firstSpace.idx\r\n\r\n    const expr = expr2(str, i)\r\n    if (!expr) return null\r\n    i = expr.idx\r\n\r\n    const lastSpace = space(str, i)\r\n    if (lastSpace) i = lastSpace.idx\r\n\r\n    if (str[i] != \")\") return null; i++\r\n\r\n    return {\r\n        type: \"group\",\r\n        value: expr,\r\n        idx: i,\r\n    } as const\r\n}\r\n\r\nconst term = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    const termFns = [group as any, list, _null, boolean, number, string, name]\r\n    let term: ReturnType<typeof termFns[number]> | null = null\r\n\r\n    for (const termFn of termFns) {\r\n        term = termFn(str, i)\r\n        if (term) break\r\n    }\r\n\r\n    if (!term) return null\r\n    i = term.idx\r\n\r\n    return { type: \"term\", value: term, idx: i } as const\r\n}\r\n\r\nconst prefix = (str: string, idx: number = 0) => {\r\n    const operators = [\"not\"]\r\n\r\n    const id = word(str, idx)\r\n    if (!id) return null\r\n\r\n    const value = operators.find(x => x == id.value)\r\n    if (!value) return null\r\n\r\n    return {\r\n        type: \"prefix\",\r\n        idx: id.idx,\r\n        value,\r\n    } as const\r\n}\r\n\r\nconst infix0 = (str: string, idx: number = 0) => {\r\n    const operators = [\"lte\", \"gte\", \"lt\", \"gt\", \"eq\", \"in\", \"notin\", \"noteq\"]\r\n\r\n    const id = word(str, idx)\r\n    if (!id) return null\r\n\r\n    const value = operators.find(x => x == id.value)\r\n    if (!value) return null\r\n\r\n    return {\r\n        type: \"infix0\",\r\n        idx: id.idx,\r\n        value,\r\n    } as const\r\n}\r\n\r\nconst infix1 = (str: string, idx: number = 0) => {\r\n    const operators = [\"and\"]\r\n\r\n    const id = word(str, idx)\r\n    if (!id) return null\r\n\r\n    const value = operators.find(x => x == id.value)\r\n    if (!value) return null\r\n\r\n    return {\r\n        type: \"infix1\",\r\n        idx: id.idx,\r\n        value,\r\n    } as const\r\n}\r\n\r\nconst infix2 = (str: string, idx: number = 0) => {\r\n    const operators = [\"or\"]\r\n\r\n    const id = word(str, idx)\r\n    if (!id) return null\r\n\r\n    const value = operators.find(x => x == id.value)\r\n    if (!value) return null\r\n\r\n    return {\r\n        type: \"infix2\",\r\n        idx: id.idx,\r\n        value,\r\n    } as const\r\n}\r\n\r\nconst expr0 = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    const firstPrefix = prefix(str, i)\r\n\r\n    if (firstPrefix) {\r\n        i = firstPrefix.idx\r\n        const firstSpace = space(str, i)\r\n        if (firstSpace) i = firstSpace.idx\r\n    }\r\n\r\n    const firstTerm = term(str, i)\r\n    if (!firstTerm) return null\r\n    i = firstTerm.idx\r\n\r\n    type PrefixOperation = {\r\n        type: \"prefix-operation\",\r\n        operator: NonNullable<ReturnType<typeof prefix>>,\r\n        operand: NonNullable<ReturnType<typeof term>>,\r\n        idx: number\r\n    }\r\n\r\n    type Infix0Operation = {\r\n        type: \"infix0-operation\",\r\n        operator: NonNullable<ReturnType<typeof infix0>>,\r\n        left: Infix0Operation | PrefixOperation | NonNullable<ReturnType<typeof term>>,\r\n        right: PrefixOperation | NonNullable<ReturnType<typeof term>>,\r\n        idx: number\r\n    }\r\n\r\n    let left:\r\n        | Infix0Operation\r\n        | PrefixOperation\r\n        | NonNullable<ReturnType<typeof term>>\r\n        = !firstPrefix ? firstTerm : {\r\n            type: \"prefix-operation\",\r\n            operator: firstPrefix,\r\n            operand: firstTerm,\r\n            idx: i\r\n        } as const\r\n\r\n    while (true) {\r\n        const nextSpace = space(str, i)\r\n        if (nextSpace) i = nextSpace.idx\r\n\r\n        const nextInfix0 = infix0(str, i)\r\n        if (!nextInfix0) break\r\n        i = nextInfix0.idx\r\n\r\n        const lastSpace = space(str, i)\r\n        if (lastSpace) i = lastSpace.idx\r\n\r\n        const nextPrefix = prefix(str, i)\r\n        if (nextPrefix) {\r\n            i = nextPrefix.idx\r\n            const lastSpace = space(str, i)\r\n            if (lastSpace) i = lastSpace.idx\r\n        }\r\n\r\n        const nextTerm = term(str, i)\r\n        if (!nextTerm) return null\r\n        i = nextTerm.idx\r\n\r\n        const right = !nextPrefix ? nextTerm : {\r\n            type: \"prefix-operation\",\r\n            operator: nextPrefix,\r\n            operand: nextTerm,\r\n            idx: i\r\n        } as const\r\n\r\n        left = {\r\n            type: \"infix0-operation\",\r\n            operator: nextInfix0,\r\n            idx: i,\r\n            left,\r\n            right,\r\n        } as const\r\n    }\r\n\r\n    return left\r\n}\r\n\r\nconst expr1 = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    const firstExpr0 = expr0(str, i)\r\n    if (!firstExpr0) return null\r\n    i = firstExpr0.idx\r\n\r\n    type Infix1Operation = {\r\n        type: \"infix1-operation\",\r\n        operator: NonNullable<ReturnType<typeof infix1>>,\r\n        left: Infix1Operation | NonNullable<ReturnType<typeof expr0>>,\r\n        right: NonNullable<ReturnType<typeof expr0>>,\r\n        idx: number\r\n    }\r\n\r\n    let left:\r\n        | Infix1Operation\r\n        | NonNullable<ReturnType<typeof expr0>> = firstExpr0\r\n\r\n    while (true) {\r\n        const nextSpace = space(str, i)\r\n        if (nextSpace) i = nextSpace.idx\r\n\r\n        const nextInfix1 = infix1(str, i)\r\n        if (!nextInfix1) break\r\n        i = nextInfix1.idx\r\n\r\n        const lastSpace = space(str, i)\r\n        if (lastSpace) i = lastSpace.idx\r\n\r\n        const nextExpr0 = expr0(str, i)\r\n        if (!nextExpr0) return null\r\n        i = nextExpr0.idx\r\n\r\n        left = {\r\n            type: \"infix1-operation\",\r\n            operator: nextInfix1,\r\n            idx: i,\r\n            left,\r\n            right: nextExpr0,\r\n        } as const\r\n    }\r\n\r\n    return left\r\n}\r\n\r\nconst expr2 = (str: string, idx: number = 0) => {\r\n    let i = idx\r\n    const firstExpr1 = expr1(str, i)\r\n    if (!firstExpr1) return null\r\n    i = firstExpr1.idx\r\n\r\n    type Infix2Operation = {\r\n        type: \"infix2-operation\",\r\n        operator: NonNullable<ReturnType<typeof infix2>>,\r\n        left: Infix2Operation | NonNullable<ReturnType<typeof expr1>>,\r\n        right: NonNullable<ReturnType<typeof expr1>>,\r\n        idx: number\r\n    }\r\n\r\n    let left:\r\n        | Infix2Operation\r\n        | NonNullable<ReturnType<typeof expr1>> = firstExpr1\r\n\r\n    while (true) {\r\n        const nextSpace = space(str, i)\r\n        if (nextSpace) i = nextSpace.idx\r\n\r\n        const nextInfix2 = infix2(str, i)\r\n        if (!nextInfix2) break\r\n        i = nextInfix2.idx\r\n\r\n        const lastSpace = space(str, i)\r\n        if (lastSpace) i = lastSpace.idx\r\n\r\n        const nextExpr1 = expr1(str, i)\r\n        if (!nextExpr1) return null\r\n        i = nextExpr1.idx\r\n\r\n        left = {\r\n            type: \"infix2-operation\",\r\n            operator: nextInfix2,\r\n            idx: i,\r\n            left,\r\n            right: nextExpr1,\r\n        } as const\r\n    }\r\n\r\n    return left\r\n}\r\n\r\nexport const parse = {\r\n    space,\r\n    null: _null,\r\n    boolean,\r\n    number,\r\n    string,\r\n    word,\r\n    name,\r\n    term,\r\n    list,\r\n    group,\r\n    prefix,\r\n    infix0,\r\n    infix1,\r\n    infix2,\r\n    expr0,\r\n    expr1,\r\n    expr2,\r\n}"],"names":["space","str","idx","i","length","match","slice","type","value","_null","firstWord","word","boolean","includes","number","sign","charAt","char","test","endsWith","Number","string","startsWith","escaped","name","words","currentWord","isArray","push","nextWord","list","firstSpace","firstTerm","term","nextSpace","lastSpace","lastTerm","group","expr","expr2","termFns","termFn","prefix","id","find","x","infix0","infix1","infix2","expr0","firstPrefix","left","operator","operand","nextInfix0","nextPrefix","nextTerm","right","expr1","firstExpr0","nextInfix1","nextExpr0","firstExpr1","nextInfix2","nextExpr1","parse","null"],"mappings":"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"}