const e=(e,n=0)=>{let t=n,l=null;for(;t<e.length;t++){const r=e.slice(n,t+1).match(/^(\s+)$/);if(!r)break;l=r}return l?{type:"space",value:l[1],idx:t}:null},n=(e,n=0)=>{let t=n;const l=i(e,t);return l&&"null"==l.value?(t=l.idx,{type:"null",value:null,idx:t}):null},t=(e,n=0)=>{let t=n;const l=i(e,t);return l&&["true","false"].includes(l.value)?(t=l.idx,{type:"boolean",value:"true"==l.value,idx:t}):null},l=(e,n=0)=>{let t=n,l="",r="+";for("-"==e.charAt(t)&&(r="-",t++);t<e.length;t++){const n=e.charAt(t);if(!(/\d/.test(n)||l&&!l.includes(".")&&"."==n))break;l+=n}return!l||l.endsWith(".")?null:{type:"number",value:Number(r+l),idx:t}},r=(e,n=0)=>{let t=n;if('"'!=e.charAt(t))return null;t++;let l="",r=e[t],i=!1;for(;t<e.length;t++,r=e[t])if(i||!['"',"\\"].includes(e[t]))l+=(i?"\\":"")+r,i=!1;else if("\\"==r)i=!0;else if(!i&&'"'==r){t++;break}return i||'"'!=r?null:{type:"string",value:l,idx:t}},i=(e,n=0)=>{let t=n,l=null;for(;t<e.length;t++){const r=e.slice(n,t+1).match(/^([a-zA-Z_][a-zA-Z0-9_]*)$/);if(!r)break;l=r}return l?{type:"word",value:l[1],idx:t}:null},u=(e,n=0)=>{let t=n;const l=i(e,t),r=[];if(!l)return null;t=l.idx;let u={value:l.value,isArray:!1};for(r.push(u);"[]"==e.slice(t,t+2)&&(t+=2,u.isArray=!0),"."==e[t];){t++;const n=i(e,t);if(!n)return null;t=n.idx,r.push(u={value:n.value,isArray:!1})}return{type:"name",idx:t,words:r}},o=(n,t=0)=>{let l=t;const r=[];if("["!=n[l])return null;l++;const i=e(n,l);i&&(l=i.idx);const u=x(n,l);for(null!==u&&(l=u.idx,r.push(u));null!==u;){const t=e(n,l);if(t&&(l=t.idx),","!=n[l])break;l++;const i=e(n,l);i&&(l=i.idx);const u=x(n,l);if(null===u)break;l=u.idx,r.push(u)}const o=e(n,l);return o&&(l=o.idx),"]"!=n[l]?null:(l++,{type:"list",value:r,idx:l})},s=(n,t=0)=>{let l=t;if("("!=n[l])return null;l++;const r=e(n,l);r&&(l=r.idx);const i=y(n,l);if(!i)return null;l=i.idx;const u=e(n,l);return u&&(l=u.idx),")"!=n[l]?null:(l++,{type:"group",value:i,idx:l})},x=(e,i=0)=>{let x=i;const d=[s,o,n,t,l,r,u];let a=null;for(const n of d)if(a=n(e,x),a)break;return a?(x=a.idx,{type:"term",value:a,idx:x}):null},d=(e,n=0)=>{const t=i(e,n);if(!t)return null;const l=["not"].find((e=>e==t.value));return l?{type:"prefix",idx:t.idx,value:l}:null},a=(e,n=0)=>{const t=i(e,n);if(!t)return null;const l=["lte","gte","lt","gt","eq","in","notin","noteq","has","begins","ends"].find((e=>e==t.value));return l?{type:"infix0",idx:t.idx,value:l}:null},f=(e,n=0)=>{const t=i(e,n);if(!t)return null;const l=["and"].find((e=>e==t.value));return l?{type:"infix1",idx:t.idx,value:l}:null},c=(e,n=0)=>{const t=i(e,n);if(!t)return null;const l=["or"].find((e=>e==t.value));return l?{type:"infix2",idx:t.idx,value:l}:null},p=(n,t=0)=>{let l=t;const r=d(n,l);if(r){l=r.idx;const t=e(n,l);t&&(l=t.idx)}const i=x(n,l);if(!i)return null;l=i.idx;let u=r?{type:"prefix-operation",operator:r,operand:i,idx:l}:i;for(;;){const t=e(n,l);t&&(l=t.idx);const r=a(n,l);if(!r)break;l=r.idx;const i=e(n,l);i&&(l=i.idx);const o=d(n,l);if(o){l=o.idx;const t=e(n,l);t&&(l=t.idx)}const s=x(n,l);if(!s)return null;l=s.idx;u={type:"infix0-operation",operator:r,idx:l,left:u,right:o?{type:"prefix-operation",operator:o,operand:s,idx:l}:s}}return u},v=(n,t=0)=>{let l=t;const r=p(n,l);if(!r)return null;l=r.idx;let i=r;for(;;){const t=e(n,l);t&&(l=t.idx);const r=f(n,l);if(!r)break;l=r.idx;const u=e(n,l);u&&(l=u.idx);const o=p(n,l);if(!o)return null;l=o.idx,i={type:"infix1-operation",operator:r,idx:l,left:i,right:o}}return i},y=(n,t=0)=>{let l=t;const r=v(n,l);if(!r)return null;l=r.idx;let i=r;for(;;){const t=e(n,l);t&&(l=t.idx);const r=c(n,l);if(!r)break;l=r.idx;const u=e(n,l);u&&(l=u.idx);const o=v(n,l);if(!o)return null;l=o.idx,i={type:"infix2-operation",operator:r,idx:l,left:i,right:o}}return i},h={space:e,null:n,boolean:t,number:l,string:r,word:i,name:u,term:x,list:o,group:s,prefix:d,infix0:a,infix1:f,infix2:c,expr0:p,expr1:v,expr2:y};export{h as parse};
//# sourceMappingURL=bundle-index.js.map
